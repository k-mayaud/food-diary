<?php

namespace App\Tests\Controller;

use App\Entity\User;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;

class DiaryControllerTest extends WebTestCase
{
    private KernelBrowser|null $client = null;

    public function setUp() : void
    {
        $this->client = static::createClient();
        $this->userRepository = $this->client->getContainer()->get('doctrine.orm.entity_manager')->getRepository(User::class);
        // Mettre comme argument de la methode FindOneByEmail
        // l'email utilisé sur Github, ou regarder en base de données quel est l'email renseigné.
        $this->user = $this->userRepository->findOneByEmail('<email utilisé sur github>');
        $this->urlGenerator = $this->client->getContainer()->get('router.default');
        $this->client->loginUser($this->user);
    }

    public function testHomepageIsUp()
    {
        //Connection à Github avec le user récupéré en base
        $this->client->request(Request::METHOD_GET, $this->urlGenerator->generate('homepage'));
        $this->assertResponseStatusCodeSame(Response::HTTP_OK);
    }

    public function testHomepage()
    {
        $crawler = $this->client->request(Request::METHOD_GET, $this->urlGenerator->generate('homepage'));
        $this->assertSame(
            1,
            $crawler->filter('html:contains("Bienvenue sur FoodDiary!")')->count()
        );
        $this->assertSame(1, $crawler->filter('h1')->count());
    }

    public function testAddRecord()
    {
        $crawler = $this->client->request(Request::METHOD_GET, $this->urlGenerator->generate('add-new-record'));
        $form = $crawler->selectButton('Ajouter')->form();
        $form['food[entitled]'] = 'Plat de pâtes';
        $form['food[calories]'] = 600;
        $this->client->submit($form);
        $this->client->followRedirect();
        // Attention à bien récupérer le crawler mis à jour
        $this->assertSelectorTextContains('div.alert.alert-success','Votre quota n\'est pas encore atteint.');
    }

    public function testList()
    {
        $crawler = $this->client->request(Request::METHOD_GET, $this->urlGenerator->generate('diary'));
        $link = $crawler->selectLink('Voir tous mes rapports')->link();
        $crawler = $this->client->click($link);
        $info = $crawler->filter('h1')->text();
        // On retire les retours à la ligne pour faciliter la vérification
        $info = trim(preg_replace('/\s\s+/', ' ', $info));
        $this->assertSame("Tous les rapports Tout ce qui a été mangé !", $info);
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
